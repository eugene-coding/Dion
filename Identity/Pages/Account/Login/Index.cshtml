@page
@model Identity.Pages.Login.Index

<h1 class="mb-3">@Model.Text["HeadingTitle"]</h1>

@if (Model.View.EnableLocalLogin)
{
    <form class="mb-3" method="post">
        <input type="hidden" asp-for="Input.ReturnUrl" />

        <div class="form-floating mb-3">
            <input class="form-control" data-val-remote-additionalfields="__RequestVerificationToken" 
                placeholder="@Model.Text[nameof(@Model.Input.Username)]" asp-for="Input.Username" autofocus />
            <label asp-for="Input.Username"></label>
            <span asp-validation-for="Input.Username"></span>
        </div>

        <button class="btn btn-primary" value="login">@Model.Text["Login"]</button>
    </form>
}

@if (Model.View.VisibleExternalProviders.Any())
{
    <ul class="list-inline">
        @foreach (var provider in Model.View.VisibleExternalProviders)
        {
            <li class="list-inline-item">
                <a class="btn btn-secondary"
           asp-page="/ExternalLogin/Challenge"
           asp-route-scheme="@provider.AuthenticationScheme"
           asp-route-returnUrl="@Model.Input.ReturnUrl">
                    @provider.DisplayName
                </a>
            </li>
        }
    </ul>
}

@if (!Model.View.EnableLocalLogin && !Model.View.VisibleExternalProviders.Any())
{
    <div class="alert alert-warning">
        <strong>@Model.Text["InvalidLoginTitle"]</strong>
        @Model.Text["InvalidLoginDescription"]
    </div>
}

@section Scripts {
    <partial name="_Validation" />

    <script>
        $.validator.setDefaults({
            onkeyup: false,
            onfocusout: false
        });
    </script>
}
